(()=>{"use strict";var e={d:(t,o)=>{for(var r in o)e.o(o,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:o[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{blockNavHeader:()=>r,blockResponses:()=>n,blockTopMenu:()=>a,mobileTreshold:()=>l,smallTreshold:()=>s,wideTreshold:()=>i});var o=["tg","whatsapp"],r=".t821",n=".t734",a=".t229",l="980px",s="660px",i="1200px",c=t.blockTopMenu,u=t.blockNavHeader,d=t.mobileTreshold,m=t.wideTreshold,v=(parseInt(t.smallTreshold),parseInt(d),parseInt(m)),g=u;function p(e){var t=document.createElement("template");t.innerHTML=e.trim();var o=t.content.childNodes.length;if(1!==o){var r=new Error("html parameter must represent a single node; got ".concat(o,". ")+'Note that leading or trailing spaces around an element in your HTML, like " <img/> ", get parsed as text nodes neighbouring the element; call .trim() on your input to avoid this.');console.error("[RequestFormModal:htmlToNode]",r);debugger;throw r}return t.content.firstChild}function f(){var e=document.querySelector(".uc-Responses");e&&function(e){var t=p('<div class="Title">Отзывы о работе с нами</div>');e.prepend(t)}(e)}function y(){var e=document.querySelector(".uc-Faq");e&&function(e){var t=p('<div class="Title">Вопросы и ответы</div>');e.prepend(t)}(e)}console.warn.call(console,"DEBUG: certifico-included-assets v.0.0.6 / 2024.10.17 16:10 +0300"),window.addEventListener("load",(function(){var e,t,r,n,a;e=".uc-NavHeader ".concat(g,"__adress-container .t-descr"),t="".concat(e," a"),r=document.querySelector(e),n=document.querySelectorAll(t),r&&r.classList.toggle("SocialIcons",!0),n.forEach((function(e){var t=e.textContent,r=t.startsWith("#")&&t.substring(1);r&&o.includes(r)&&(e.classList.toggle("SocialIcon",!0),e.id=r,e.setAttribute("target","_blank"),e.innerHTML="")})),function(){var e=".uc-TopMenu ".concat(c,"__maincontainer"),t=".uc-NavHeader ".concat(u),o=document.querySelector(e),r=document.querySelector(t);if(o){var n=o.cloneNode(!0);n.removeAttribute("style"),n.classList.toggle("SubMenu",!0),r.append(n)}}(),a="".concat(".uc-ServicesGallery"," .t-card__col"),document.querySelectorAll(a).forEach((function(e){var t=e.querySelector("img");new MutationObserver((function(o){o.forEach((function(o){if("attributes"===o.type){var r=o.attributeName,n=o.target.getAttribute(r);"src"===r&&(e.style.backgroundImage='url("'.concat(n,'")'),t.remove())}}))})).observe(t,{attributes:!0})})),f(),function(){var e,t,o,r=$(".uc-ClientsBlock");if(r[0]){r[0].classList.toggle("GalleryWrapper",!0);var n=r.find(".t467__descr");n[0].classList.toggle("GalleryContainer",!0),n.html('<div class="GalleryCarousel owl-carousel owl-theme"></div>');var a=n.find(".owl-carousel"),l=$(".uc-ClientsContent"),s=l.find(".tn-atom");s.each((function(e,t){var o=t.getElementsByTagName("img")[0];null==o||o.classList.toggle("tn-atom__img",!1),t.classList.toggle("tn-atom",!1),t.classList.toggle("item",!0)})),s.appendTo(a),l.remove();var i=a.owlCarousel({loop:!0,center:!0,dots:!0,nav:!1,margin:5,autoplay:!0,autoplayTimeout:3e3,autoplayHoverPause:!0,smartSpeed:2e3,items:4,responsive:(e={0:{items:1},480:{items:2},640:{items:3}},e[v]={items:5},e)}),c=null===(t=document.querySelector(".t-slds__arrow.t-slds__arrow-right"))||void 0===t?void 0:t.cloneNode(!0),u=null===(o=document.querySelector(".t-slds__arrow.t-slds__arrow-left"))||void 0===o?void 0:o.cloneNode(!0);if(u&&c){r.find(".t467").append(u,c),u.addEventListener("click",(function(){return i.trigger("prev.owl.carousel")})),c.addEventListener("click",(function(){return i.trigger("next.owl.carousel")}));var d=function(){return i.trigger("play.owl.autoplay")},m=function(){return i.trigger("stop.owl.autoplay")};u.addEventListener("mouseover",m),u.addEventListener("mouseout",d),c.addEventListener("mouseover",m),c.addEventListener("mouseout",d)}}}(),y()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,