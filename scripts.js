(()=>{"use strict";var e={d:(t,o)=>{for(var r in o)e.o(o,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:o[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{blockNavHeader:()=>r,blockResponses:()=>n,blockTopMenu:()=>a,mobileTreshold:()=>l,smallTreshold:()=>c,wideTreshold:()=>i});var o=["tg","whatsapp"],r=".t821",n=".t734",a=".t229",l="980px",c="660px",i="1200px",s=t.blockTopMenu,u=t.blockNavHeader,d=t.mobileTreshold,v=t.wideTreshold,m=(parseInt(t.smallTreshold),parseInt(d),parseInt(v)),p=u;function g(e){var t=document.createElement("template");t.innerHTML=e.trim();var o=t.content.childNodes.length;if(1!==o){var r=new Error("html parameter must represent a single node; got ".concat(o,". ")+'Note that leading or trailing spaces around an element in your HTML, like " <img/> ", get parsed as text nodes neighbouring the element; call .trim() on your input to avoid this.');console.error("[RequestFormModal:htmlToNode]",r);debugger;throw r}return t.content.firstChild}function f(){!function(e){var t=g('<div class="Title">Отзывы о работе с нами</div>');e.prepend(t)}(document.querySelector(".uc-Responses"))}function y(){!function(e){var t=g('<div class="Title">Вопросы и ответы</div>');e.prepend(t)}(document.querySelector(".uc-Faq"))}console.warn.call(console,"DEBUG: certifico-included-assets v.0.0.6 / 2024.10.17 15:44 +0300"),window.addEventListener("load",(function(){var e,t,r,n,a;e=".uc-NavHeader ".concat(p,"__adress-container .t-descr"),t="".concat(e," a"),r=document.querySelector(e),n=document.querySelectorAll(t),r&&r.classList.toggle("SocialIcons",!0),n.forEach((function(e){var t=e.textContent,r=t.startsWith("#")&&t.substring(1);r&&o.includes(r)&&(e.classList.toggle("SocialIcon",!0),e.id=r,e.setAttribute("target","_blank"),e.innerHTML="")})),function(){var e=".uc-TopMenu ".concat(s,"__maincontainer"),t=".uc-NavHeader ".concat(u),o=document.querySelector(e),r=document.querySelector(t);if(o){var n=o.cloneNode(!0);n.removeAttribute("style"),n.classList.toggle("SubMenu",!0),r.append(n)}}(),a="".concat(".uc-ServicesGallery"," .t-card__col"),document.querySelectorAll(a).forEach((function(e){var t=e.querySelector("img");new MutationObserver((function(o){o.forEach((function(o){if("attributes"===o.type){var r=o.attributeName,n=o.target.getAttribute(r);"src"===r&&(e.style.backgroundImage='url("'.concat(n,'")'),t.remove())}}))})).observe(t,{attributes:!0})})),f(),function(){var e,t,o,r=$(".uc-ClientsBlock");r[0].classList.toggle("GalleryWrapper",!0);var n=r.find(".t467__descr");n[0].classList.toggle("GalleryContainer",!0),n.html('<div class="GalleryCarousel owl-carousel owl-theme"></div>');var a=n.find(".owl-carousel"),l=$(".uc-ClientsContent");l.find(".tn-atom").appendTo(a),l.remove();var c=a.owlCarousel({loop:!0,center:!0,dots:!0,nav:!1,margin:5,autoplay:!0,autoplayTimeout:3e3,autoplayHoverPause:!0,smartSpeed:2e3,items:4,responsive:(e={0:{items:1},480:{items:2},640:{items:3}},e[m]={items:5},e)}),i=null===(t=document.querySelector(".t-slds__arrow.t-slds__arrow-right"))||void 0===t?void 0:t.cloneNode(!0),s=null===(o=document.querySelector(".t-slds__arrow.t-slds__arrow-left"))||void 0===o?void 0:o.cloneNode(!0);if(s&&i){r.find(".t467").append(s,i),s.addEventListener("click",(function(){return c.trigger("prev.owl.carousel")})),i.addEventListener("click",(function(){return c.trigger("next.owl.carousel")}));var u=function(){return c.trigger("play.owl.autoplay")},d=function(){return c.trigger("stop.owl.autoplay")};s.addEventListener("mouseover",d),s.addEventListener("mouseout",u),i.addEventListener("mouseover",d),i.addEventListener("mouseout",u)}}(),y()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,